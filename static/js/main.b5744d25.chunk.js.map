{"version":3,"sources":["screens/GhostEvidencesScreen.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","padding","paper","spacing","formControl","marginTop","marginBottom","marginLeft","Alert","props","elevation","variant","GhostEvidencesScreenComponent","key","possibleGhosts","information","ghosts","push","state","snackBarEvidencesError","efmLvl5","freezingTemp","spiritBox","ghostWriting","ghostOrbs","fingerprints","changeEvidence","bind","closeSnackbarErrorEvidence","event","name","target","checked","amountActive","evidences","this","setState","evidencesActive","ghost","possibleGhostValidate","i","includes","length","reason","classes","className","Grid","container","item","xs","sm","lg","Paper","Typography","style","color","text","checkboxEvidencesLabel","language","FormControl","FormGroup","FormControlLabel","control","Checkbox","onChange","label","labelPossibleGhost","List","component","aria-label","map","index","array","ListItem","button","ListItemText","primary","divider","Snackbar","open","autoHideDuration","onClose","severity","snackbarEvidenceError","Component","GhostEvidencesScreen","title","flexGrow","margin","minWidth","AppComponent","languageChange","languageEvent","value","AppBar","position","Toolbar","float","marginRight","InputLabel","id","Select","MenuItem","spanish","english","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.b5744d25.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n    Grid,\r\n    makeStyles,\r\n    Theme,\r\n    Paper,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormControl,\r\n    Checkbox,\r\n    Snackbar,\r\n    List,\r\n    ListItem,\r\n    ListItemText,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\nimport information from '../json/information.json';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        padding: '10px',\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(1),\r\n    },\r\n    formControl: {\r\n        marginTop: theme.spacing(1),\r\n        marginBottom: theme.spacing(1),\r\n        marginLeft: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\ninterface Props {\r\n    classes: any;\r\n    language: 'english' | 'spanish';\r\n}\r\n\r\nclass GhostEvidencesScreenComponent extends Component<Props, any> {\r\n\r\n    possibleGhosts: Array<string>;\r\n\r\n    constructor(public props: Props) {\r\n        super(props);\r\n        this.possibleGhosts = [];\r\n        for (let key in information.ghosts) {\r\n            this.possibleGhosts.push(key);\r\n        }\r\n        this.state = {\r\n            snackBarEvidencesError: false,\r\n            efmLvl5: false,\r\n            freezingTemp: false,\r\n            spiritBox: false,\r\n            ghostWriting: false,\r\n            ghostOrbs: false,\r\n            fingerprints: false,\r\n        }\r\n        this.changeEvidence = this.changeEvidence.bind(this);\r\n        this.closeSnackbarErrorEvidence = this.closeSnackbarErrorEvidence.bind(this);\r\n    }\r\n\r\n    changeEvidence(event: React.ChangeEvent<HTMLInputElement>) {\r\n        const name = event.target.name;\r\n        if (!event.target.checked) {\r\n            this.setState({\r\n                snackBarEvidencesError: false,\r\n                [name]: false,\r\n            }, () => {\r\n                this.possibleGhosts = [];\r\n                let evidencesActive = [];\r\n                const ghost: any = information.ghosts;\r\n                for (let key in information.evidences) {\r\n                    if (this.state[key]) evidencesActive.push(key);\r\n                }\r\n                if (evidencesActive.length === 0) {\r\n                    for (let key in information.ghosts) {\r\n                        this.possibleGhosts.push(key);\r\n                    }\r\n                } else {\r\n                    for (let key in ghost) {\r\n                        let possibleGhostValidate = true;\r\n                        for (let i in evidencesActive) {\r\n                            if (!ghost[key].evidences.includes(evidencesActive[i])) {\r\n                                possibleGhostValidate = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (possibleGhostValidate) this.possibleGhosts.push(key);\r\n                    }\r\n                }\r\n                this.setState({});\r\n            });\r\n        } else {\r\n            let amountActive = 0;\r\n            for (let key in information.evidences) {\r\n                if (this.state[key]) amountActive++;\r\n            }\r\n            if (amountActive <= 2) {\r\n                this.setState({\r\n                    snackBarEvidencesError: false,\r\n                    [name]: true,\r\n                }, () => {\r\n                    this.possibleGhosts = [];\r\n                    let evidencesActive = [];\r\n                    const ghost: any = information.ghosts;\r\n                    for (let key in information.evidences) {\r\n                        if (this.state[key]) evidencesActive.push(key);\r\n                    }\r\n                    for (let key in ghost) {\r\n                        let possibleGhostValidate = true;\r\n                        for (let i in evidencesActive) {\r\n                            if (!ghost[key].evidences.includes(evidencesActive[i])) {\r\n                                possibleGhostValidate = false;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (possibleGhostValidate) this.possibleGhosts.push(key);\r\n                    }\r\n\r\n                    this.setState({});\r\n                });\r\n            } else {\r\n                this.setState({ snackBarEvidencesError: true });\r\n            }\r\n        }\r\n    }\r\n\r\n    closeSnackbarErrorEvidence(event?: React.SyntheticEvent, reason?: string) {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        this.setState({ snackBarEvidencesError: false });\r\n    };\r\n\r\n    render() {\r\n        const classes = this.props.classes;\r\n        return (\r\n            <div className={classes.root}>\r\n                <Grid container spacing={2}>\r\n\r\n                    <Grid item xs={12} sm={12} lg={6}>\r\n                        <Paper className={classes.paper}>\r\n                            <Typography variant=\"h6\" style={{ marginLeft: '20px', color: '#9A9595' }}>{information.text.checkboxEvidencesLabel[this.props.language]}</Typography>\r\n                            <FormControl className={classes.formControl}>\r\n                                <FormGroup>\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox name='efmLvl5' color='primary' checked={this.state.efmLvl5} onChange={this.changeEvidence} />}\r\n                                        label={information.evidences.efmLvl5.text[this.props.language]}\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox name='freezingTemp' color='primary' checked={this.state.freezingTemp} onChange={this.changeEvidence} />}\r\n                                        label={information.evidences.freezingTemp.text[this.props.language]}\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox name='spiritBox' color='primary' checked={this.state.spiritBox} onChange={this.changeEvidence} />}\r\n                                        label={information.evidences.spiritBox.text[this.props.language]}\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox name='ghostWriting' color='primary' checked={this.state.ghostWriting} onChange={this.changeEvidence} />}\r\n                                        label={information.evidences.ghostWriting.text[this.props.language]}\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox name='ghostOrbs' color='primary' checked={this.state.ghostOrbs} onChange={this.changeEvidence} />}\r\n                                        label={information.evidences.ghostOrbs.text[this.props.language]}\r\n                                    />\r\n                                    <FormControlLabel\r\n                                        control={<Checkbox name='fingerprints' color='primary' checked={this.state.fingerprints} onChange={this.changeEvidence} />}\r\n                                        label={information.evidences.fingerprints.text[this.props.language]}\r\n                                    />\r\n                                </FormGroup>\r\n                            </FormControl>\r\n                        </Paper>\r\n                    </Grid>\r\n\r\n                    <Grid item xs={12} sm={12} lg={6}>\r\n                        <Paper className={classes.paper}>\r\n                            <Typography variant=\"h6\" style={{ marginLeft: '20px', color: '#9A9595' }}>\r\n                                {information.text.labelPossibleGhost[this.props.language]}\r\n                            </Typography>\r\n                            <List component=\"nav\" className={classes.root} aria-label=\"mailbox folders\">\r\n                                {\r\n                                    this.possibleGhosts.map((item: any, index: number, array: Array<string>) => {\r\n                                        const ghost: any = information.ghosts;\r\n                                        if (index === (array.length - 1)) {\r\n                                            return (\r\n                                                <ListItem button>\r\n                                                    <ListItemText primary={ghost[item].text[this.props.language]} />\r\n                                                </ListItem>\r\n                                            )\r\n                                        }\r\n                                        return (\r\n                                            <ListItem button divider>\r\n                                                <ListItemText primary={ghost[item].text[this.props.language]} />\r\n                                            </ListItem>\r\n                                        )\r\n                                    })\r\n                                }\r\n                            </List>\r\n                        </Paper>\r\n                    </Grid>\r\n\r\n                </Grid>\r\n                <Snackbar open={this.state.snackBarEvidencesError} autoHideDuration={6000} onClose={this.closeSnackbarErrorEvidence}>\r\n                    <Alert onClose={this.closeSnackbarErrorEvidence} severity=\"error\">\r\n                        {information.text.snackbarEvidenceError[this.props.language]}\r\n                    </Alert>\r\n                </Snackbar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default function GhostEvidencesScreen(props: { language: 'english' | 'spanish' }) {\r\n    const classes = useStyles();\r\n    return (\r\n        <GhostEvidencesScreenComponent classes={classes} language={props.language} />\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport 'fontsource-roboto';\r\nimport {\r\n  makeStyles,\r\n  Theme,\r\n  Typography,\r\n  AppBar,\r\n  Toolbar,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n} from '@material-ui/core';\r\nimport GhostEvidencesScreen from './screens/GhostEvidencesScreen';\r\nimport information from './json/information.json';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n  root: {\r\n\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n}));\r\n\r\ninterface Props {\r\n  classes: any;\r\n}\r\n\r\ninterface State {\r\n  language: 'english' | 'spanish';\r\n}\r\n\r\nclass AppComponent extends Component<Props, State> {\r\n\r\n  constructor(public props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      language: 'english',\r\n    }\r\n\r\n    this.languageChange = this.languageChange.bind(this);\r\n  }\r\n\r\n  languageChange(event: React.ChangeEvent<{ value: unknown }>) {\r\n    const languageEvent: any = event.target.value;\r\n    this.setState({\r\n      language: languageEvent,\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    const classes = this.props.classes;\r\n    return (\r\n      <div className={classes.root}>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              {information.text.title[this.state.language]}\r\n            </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <FormControl className={classes.formControl} style={{ float: \"right\", marginRight: '30px' }}>\r\n          <InputLabel id=\"demo-simple-select-label\">{information.text.language[this.state.language]}</InputLabel>\r\n          <Select\r\n            value={this.state.language}\r\n            onChange={this.languageChange}\r\n          >\r\n            <MenuItem value={'spanish'}>{information.text.spanish[this.state.language]}</MenuItem>\r\n            <MenuItem value={'english'}>{information.text.english[this.state.language]}</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n        <GhostEvidencesScreen language={this.state.language}></GhostEvidencesScreen>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  \r\n}\r\n\r\nexport default function App() {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppComponent classes={classes} />\r\n  )\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}